Normalization
+Normalization is the process of organizing the data in the database.
+Normalization is used to minimize the redundancy from a relation or set of relations. It is also used to eliminate the undesirable characteristics like Insertion, Update and Deletion Anomalies.
+Normalization divides the larger table into the smaller table and links them using relationship.
+The normal form is used to reduce redundancy from the database table.

Types of Normal Forms
1NF-A relation is in 1NF if it contains an atomic value.
2NF-A relation will be in 2NF if it is in 1NF and all non-key attributes are fully functional dependent on the primary key.
3NF-A relation will be in 3NF if it is in 2NF and no transition dependency exists.
4NF-A relation will be in 4NF if it is in Boyce Codd normal form and has no multi-valued dependency.
5NF-A relation is in 5NF if it is in 4NF and not contains any join dependency and joining should be lossless.

First Normal Form (1NF)
A relation will be 1NF if it contains an atomic value.
It states that an attribute of a table cannot hold multiple values. It must hold only single-valued attribute.
First normal form disallows the multi-valued attribute, composite attribute, and their combinations.
Example: Relation EMPLOYEE is not in 1NF because of multi-valued attribute EMP_PHONE.

EMPLOYEE table:

EMP_ID	EMP_NAME	EMP_PHONE	  EMP_STATE
14	      John	 7272826385,
                 9064738238	     UP
20	      Harry	 8574783832	    Bihar
12	       Sam	 7390372389,
                 8589830302	    Punjab
                 
 The decomposition of the EMPLOYEE table into 1NF has been shown below:

EMP_ID	EMP_NAME	 EMP_PHONE	   EMP_STATE
14	      John	  7272826385	    UP
14	      John	  9064738238	    UP
20	     Harry	  8574783832	   Bihar
12	      Sam	    7390372389	   Punjab
12	      Sam	    8589830302	   Punjab

Second Normal Form (2NF)
In the 2NF, relational must be in 1NF.
In the second normal form, all non-key attributes are fully functional dependent on the primary key
Example: Let's assume, a school can store the data of teachers and the subjects they teach. In a school, a teacher can teach more than one subject.

TEACHER table

TEACHER_ID	SUBJECT	TEACHER_AGE
25	       Chemistry	30
25	        Biology	  30
47	        English	  35
83	         Math	    38
83	       Computer	  38

In the given table, non-prime attribute TEACHER_AGE is dependent on TEACHER_ID which is a proper subset of a candidate key. That's why it violates the rule for 2NF.

To convert the given table into 2NF, we decompose it into two tables:

TEACHER_DETAIL table:

TEACHER_ID	TEACHER_AGE
25	           30
47	           35
83	           38

TEACHER_SUBJECT table:

TEACHER_ID	SUBJECT
25	        Chemistry
25	         Biology
47	         English
83	          Math

Third Normal Form (3NF)
A relation will be in 3NF if it is in 2NF and not contain any transitive partial dependency.
3NF is used to reduce the data duplication. It is also used to achieve the data integrity.
If there is no transitive dependency for non-prime attributes, then the relation must be in third normal form.
A relation is in third normal form if it holds atleast one of the following conditions for every non-trivial function dependency X → Y.

X is a super key.
Y is a prime attribute, i.e., each element of Y is part of some candidate key.

Example:

EMPLOYEE_DETAIL table:

EMP_ID	EMP_NAME	EMP_ZIP	EMP_STATE	EMP_CITY
222	      Harry	  201010	  UP	     Noida
333	     Stephan	02228	    US	     Boston
444	       Lan	  60007   	US	     Chicago
555	    Katharine	06389	    UK	     Norwich
666	      John	  462007	  MP	      Bhopal

Super key in the table above:

{EMP_ID}, {EMP_ID, EMP_NAME}, {EMP_ID, EMP_NAME, EMP_ZIP}....so on  

Candidate key: {EMP_ID}

Non-prime attributes: In the given table, all attributes except EMP_ID are non-prime.

Here, EMP_STATE & EMP_CITY dependent on EMP_ZIP and EMP_ZIP dependent on EMP_ID. The non-prime attributes (EMP_STATE, EMP_CITY) transitively dependent on super key(EMP_ID). It violates the rule of third normal form.

That's why we need to move the EMP_CITY and EMP_STATE to the new <EMPLOYEE_ZIP> table, with EMP_ZIP as a Primary key.

EMPLOYEE table:

EMP_ID	EMP_NAME	EMP_ZIP
222	     Harry	   201010
333	    Stephan	    02228
444	      Lan	      60007
555	    Katharine	  06389

EMPLOYEE_ZIP table:

EMP_ZIP	EMP_STATE	EMP_CITY
201010	   UP	     Noida
02228	     US	     Boston
60007	     US	     Chicago
06389	     UK	     Norwich
462007	   MP	      Bhopal
Boyce Codd normal form (BCNF)
BCNF is the advance version of 3NF. It is stricter than 3NF.
A table is in BCNF if every functional dependency X → Y, X is the super key of the table.
For BCNF, the table should be in 3NF, and for every FD, LHS is super key.
Example: Let's assume there is a company where employees work in more than one department.

666	John	462007
